package demo_usr.know;

import java.io.IOException;

import us.monoid.json.JSONArray;
import us.monoid.json.JSONException;
import us.monoid.json.JSONObject;
import knowledgeblock.client.*;

import usr.applications.Application;
import usr.applications.ApplicationResponse;

public class GenericSourceNEM extends BasicEntity {

	// default initialization values
	int timePeriod = 5000;
	//String uri = "/BaseStations/Detail/All";
	String uri = "/test/All";
	
	private Thread entityThread;
	
	public GenericSourceNEM () {
		entityid = 10310;
	}
	
    /* 
     * THIS IS NEVER CALLED via the virtual router Application startup
     */
	public GenericSourceNEM (int entityid_, int timePeriod_, String uri_) {
		entityid = entityid_;
		timePeriod = timePeriod_;
		uri = uri_;
		
		try {
			initRegistrationInfo();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		init();
	}
	
	protected void initRegistrationInfo () throws JSONException {
		registrationInfo = new JSONObject();
		registrationInfo.put("entityid", entityid);
		//registrationInfo.put("entityname", "Generic Source NEM");

		JSONArray availableArray = new JSONArray();
		availableArray.put(uri);
		//availableArray.put("/BaseStations/LoadPerTimeZone/All");

		// specifying the information collection callback URL
		String icCallBackURL="http://" + restHost + ":" + entityid + "/update/";
		registrationInfo.put("iccallbackURL", icCallBackURL);

		registrationInfo.put("urisforavailableinformation", availableArray);

		registrationInfo.put("ifpcallbackURL", "http://" + restHost + ":" + entityid + "/update/");

		// Setting proposed information flow requirements / constraints
		JSONObject informationflowconstraints = new JSONObject();

		informationflowconstraints.put("minimumInformationSharingRate", 2);
		informationflowconstraints.put("maximumInformationSharingRate", 5);

		JSONObject performanceGoal = new JSONObject();
		// Default goal
		performanceGoal.put("optGoalId", 1);
		performanceGoal.put("optGoalName", "Reduce response time");
		performanceGoal.put("optGoalParameters", "");
		performanceGoal.put("optGoalLevelofEnforcement", "high");

		informationflowconstraints.put("flowOptimizationGoal", performanceGoal);
		informationflowconstraints.put("method", 3);
		registrationInfo.put("informationflowconstraints", informationflowconstraints);
	}

    /**
     * Initialize with some args
     */
    public ApplicationResponse init(String[] args) {
        try {
            initRegistrationInfo();
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return new ApplicationResponse(true, "");

    }

    /**
     * Start an application.
     * This is called before run().
     */
    public ApplicationResponse start() {
        init();

        return new ApplicationResponse(true, "");
    }


    /**
     * Stop an application.
     * This is called to implement graceful shut down
     * and cause run() to end.
     */
    public ApplicationResponse stop() {

        return new ApplicationResponse(true, "");

    }


    public void run() {

		System.out.println("Generic Source NEM Information Sharing Example");
		//JSONObject test = null;
		
                while (entityThread!=null) {	
                    try {
                        ShareInformation(uri, GenerateLocalValue(uri));
                        System.out.println ("Waiting "+timePeriod+" ms");
                        Thread.sleep(timePeriod);
                    } catch (java.lang.InterruptedException ex) {
                        System.out.println("Stopped!");
                    }
                }
		
		/*while (true) {
			test = GenerateLocalValue(uri);
			ShareInformation(uri, test);

			//System.out.println ("Sharing value:"+test.toString());
			System.out.println ("Waiting "+timePeriod+" ms");
			try {
				Thread.sleep(timePeriod);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}*/
	}

}

